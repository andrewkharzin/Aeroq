import { z } from "https://esm.sh/zod@3.23.8";
import type { ResourceDefinition } from "../core/types.ts";

const participantAddress: ResourceDefinition = {
  name: "participant_address",
  table: "participant_address",
  key: "id",
  selectable: [
    "id",
    "participant_id",
    "address",
    "additional_address",
    "zip_code",
    "city",
    "state_or_province",
    "country_code",
    "country_name",
    "created_at",
    "updated_at",
    "inn",
    "ogrn",
    "okved",
    "entrepreneur_name",
    "entrepreneur_type",
    "registration_date",
    "is_active",
    "created_by"
  ],
  relations: ["participant", "auth.users"],
  defaultOrder: { column: "created_at", desc: true },
  createSchema: z.object({
    participant_id: z.number().int(),
    address: z.string(),
    additional_address: z.string().optional(),
    zip_code: z.string().optional(),
    city: z.string(),
    state_or_province: z.string().optional(),
    country_code: z.string().length(1),
    country_name: z.string(),
    inn: z.string().optional(),
    ogrn: z.string().optional(),
    okved: z.string().optional(),
    entrepreneur_name: z.string().optional(),
    entrepreneur_type: z.string().optional(),
    registration_date: z.string().optional(),
    is_active: z.boolean().optional(),
    created_by: z.string().uuid().optional(),
  }),
  updateSchema: z.object({
    participant_id: z.number().int().optional(),
    address: z.string().optional(),
    additional_address: z.string().optional(),
    zip_code: z.string().optional(),
    city: z.string().optional(),
    state_or_province: z.string().optional(),
    country_code: z.string().length(1).optional(),
    country_name: z.string().optional(),
    inn: z.string().optional(),
    ogrn: z.string().optional(),
    okved: z.string().optional(),
    entrepreneur_name: z.string().optional(),
    entrepreneur_type: z.string().optional(),
    registration_date: z.string().optional(),
    is_active: z.boolean().optional(),
  }),
  allow: { list: true, get: true, create: true, update: true, delete: true },
  rbac: ({ roles, method }) => (roles.includes("admin") ? true : method !== "DELETE"),
};

export default participantAddress;
