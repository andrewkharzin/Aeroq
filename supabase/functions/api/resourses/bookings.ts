import { z } from "https://esm.sh/zod@3.23.8";
import type { ResourceDefinition } from "../core/types.ts";

const bookings: ResourceDefinition = {
  name: "bookings",
  table: "booking",
  key: "businessId",
  selectable: [
    "businessId",
    "bookingType",
    "consolidation",
    "awb_ref",
    "bookingStatus",
    "airwaybillsIssuedOn",
    "route",
    "carrier",
    "specialHandling",
    "agent",
    "shipper",
    "consignee",
    "origin",
    "destination",
    "package",
    "shipmentMeasurements",
    "currency",
    "shipperLoadedContainer",
    "data_capture",
    "commodity",
    "reference",
    "charge_code",
    "nature_of_goods",
    "remarks",
    "delivery_remarks",
    "delivery_call",
    "over_size",
    "must_fly",
    "break_down",
    "createdAt",
    "updated_at",
    "cargo_measurements_id",
    "service_level",
    "payment_method",
    "declared_value_carriage",
    "declared_value_customs",
    "owner_id",
    "created_by",
    "bookingReferenceType"
  ],
  relations: [
    "booking_types",
    "airlines",
    "participant",
    "location",
    "agents",
    "currency",
    "cargo_measurements"
  ],
  defaultOrder: { column: "createdAt", desc: true },
  createSchema: z.object({
    bookingType: z.string().optional(),
    consolidation: z.boolean().default(false),
    awb_ref: z.string().regex(/^\d{3}-\d{8}$/).optional(),
    bookingStatus: z.enum(["DRAFT", "CONFIRMED", "CANCELLED", "COMPLETED"]).default("DRAFT"),
    airwaybillsIssuedOn: z.string().optional(),
    route: z.number().optional(),
    carrier: z.number().optional(),
    specialHandling: z.string().optional(),
    agent: z.number().optional(),
    shipper: z.number().optional(),
    consignee: z.number().optional(),
    origin: z.string().optional(),
    destination: z.string().optional(),
    package: z.number().optional(),
    shipmentMeasurements: z.number().optional(),
    currency: z.string().optional(),
    shipperLoadedContainer: z.boolean().default(false),
    data_capture: z.enum(["COMPLETE", "INCOMPLETE"]).default("INCOMPLETE"),
    commodity: z.string().max(10).optional(),
    reference: z.string().max(50).default("book ref"),
    charge_code: z.enum(["PREPAID", "COLLECT"]).optional(),
    nature_of_goods: z.string().optional(),
    remarks: z.string().optional(),
    delivery_remarks: z.string().optional(),
    delivery_call: z.boolean().default(false),
    over_size: z.boolean().default(false),
    must_fly: z.boolean().default(false),
    break_down: z.boolean().default(false),
    cargo_measurements_id: z.number().optional(),
    service_level: z.enum(["PP", "CC", "CP", "PC"]).optional(),
    payment_method: z.enum(["PP", "CC", "CP", "PC"]).optional(),
    declared_value_carriage: z.number().optional(),
    declared_value_customs: z.number().optional(),
    owner_id: z.string().uuid().optional(),
    created_by: z.string().uuid().optional(),
    bookingReferenceType: z.enum(["AIR_WAYBILL", "HOUSE_AIR_WAYBILL", "MASTER_AIR_WAYBILL"]).default("AIR_WAYBILL"),
  }),
  updateSchema: z.object({
    bookingType: z.string().optional(),
    consolidation: z.boolean().optional(),
    awb_ref: z.string().regex(/^\d{3}-\d{8}$/).optional(),
    bookingStatus: z.enum(["DRAFT", "CONFIRMED", "CANCELLED", "COMPLETED"]).optional(),
    airwaybillsIssuedOn: z.string().optional(),
    route: z.number().optional(),
    carrier: z.number().optional(),
    specialHandling: z.string().optional(),
    agent: z.number().optional(),
    shipper: z.number().optional(),
    consignee: z.number().optional(),
    origin: z.string().optional(),
    destination: z.string().optional(),
    package: z.number().optional(),
    shipmentMeasurements: z.number().optional(),
    currency: z.string().optional(),
    shipperLoadedContainer: z.boolean().optional(),
    data_capture: z.enum(["COMPLETE", "INCOMPLETE"]).optional(),
    commodity: z.string().max(10).optional(),
    reference: z.string().max(50).optional(),
    charge_code: z.enum(["PREPAID", "COLLECT"]).optional(),
    nature_of_goods: z.string().optional(),
    remarks: z.string().optional(),
    delivery_remarks: z.string().optional(),
    delivery_call: z.boolean().optional(),
    over_size: z.boolean().optional(),
    must_fly: z.boolean().optional(),
    break_down: z.boolean().optional(),
    cargo_measurements_id: z.number().optional(),
    service_level: z.enum(["PP", "CC", "CP", "PC"]).optional(),
    payment_method: z.enum(["PP", "CC", "CP", "PC"]).optional(),
    declared_value_carriage: z.number().optional(),
    declared_value_customs: z.number().optional(),
    owner_id: z.string().uuid().optional(),
    bookingReferenceType: z.enum(["AIR_WAYBILL", "HOUSE_AIR_WAYBILL", "MASTER_AIR_WAYBILL"]).optional(),
  }),
  allow: { list: true, get: true, create: true, update: true, delete: true },
  rbac: ({ roles, method }) => (roles.includes("admin") ? true : method !== "DELETE"),
};

export default bookings;
